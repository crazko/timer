{"version":3,"sources":["Option.js","Unit.js","Timer.js","registerServiceWorker.js","index.js"],"names":["Option","_ref","active","title","onClick","react_default","a","createElement","className","Unit","handleOnChange","value","isDisabled","leadingZero","textColorClass","isExpired","disabled","max","min","onChange","type","Math","abs","Timer","_Component","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","componentDidUpdate","prevProps","prevState","isCounting","state","goal","Date","setMinutes","getMinutes","minutes","setSeconds","getSeconds","seconds","setState","timer","setInterval","counting","bind","assertThisInitialized","shouldContinue","undefined","clearInterval","componentWillUnmount","handleStart","handlePause","handleReset","changeMinutes","event","checkValue","target","preventDefault","changeSeconds","toggleContinueCounting","toggleBlink","shouldBlink","diffInSeconds","getTime","now","trunc","inherits","createClass","key","_this$state","blinkClass","startPauseButtonClass","Unit_Unit","dist","color","Option_Option","Component","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","controller","console","log","catch","error","ReactDOM","render","Timer_Timer","document","getElementById","URL","process","origin","addEventListener","concat","fetch","response","status","headers","get","indexOf","ready","unregister","reload","checkValidServiceWorker","registerServiceWorker"],"mappings":"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","file":"static/js/main.ae21bfac.chunk.js","sourcesContent":["import React from 'react';\n\nexport const Option = ({ active, title, onClick }) => (\n  <div\n    className=\"text-grey-darkest bg-grey-lightest hover:text-black border hover:border-grey py-1 px-2 m-1 rounded cursor-pointer\"\n    onClick={onClick}\n  >\n    {title}\n    {active && <span className=\"ml-1\">âœ“</span>}\n  </div>\n);\n","import React from 'react';\n\nexport const Unit = ({ handleOnChange, value, isDisabled, title, isExpired }) => {\n  const leadingZero = value > -10 && value < 10 ? '0' : '';\n  const textColorClass = isExpired ? ' text-red-dark' : ' text-blue-darkest';\n\n  return (\n    <div className=\"flex flex-col-reverse\">\n      <span className=\"text-center\">{title}</span>\n      <input\n        className={'unit m-2 text-right font-mono appearance-none bg-transparent' + textColorClass}\n        disabled={isDisabled}\n        max=\"59\"\n        min=\"0\"\n        onChange={handleOnChange}\n        type=\"number\"\n        value={leadingZero + Math.abs(value)}\n      />\n    </div>\n  );\n};\n","import React, { Component } from 'react';\nimport { Option } from './Option';\nimport { Unit } from './Unit';\nimport * as Icon from 'react-feather';\n\nexport class Timer extends Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      isCounting: false,\n      minutes: props.minutes,\n      seconds: props.seconds,\n      shouldBlink: true,\n      shouldContinue: true\n    };\n  }\n\n  componentDidUpdate = (prevProps, prevState) => {\n    // Start counting\n    if (!prevState.isCounting && this.state.isCounting) {\n      const goal = new Date();\n      goal.setMinutes(goal.getMinutes() + prevState.minutes);\n      goal.setSeconds(goal.getSeconds() + prevState.seconds);\n\n      this.setState({\n        goal\n      });\n\n      this.timer = setInterval(this.counting.bind(this), 250);\n    }\n\n    // Stop counting when limit is reached\n    if (this.state.isCounting && !this.state.shouldContinue && this.state.goal <= new Date()) {\n      this.setState({\n        isCounting: false\n      });\n    }\n\n    // Clear goal when counting is over\n    if (prevState.isCounting && !this.state.isCounting) {\n      this.setState({\n        goal: undefined\n      });\n\n      clearInterval(this.timer);\n    }\n\n    // Reset time when changing expired values\n    if (\n      !this.state.isCounting &&\n      (prevState.minutes !== this.state.minutes || prevState.seconds !== this.state.seconds)\n    ) {\n      this.setState({\n        minutes: Math.abs(this.state.minutes),\n        seconds: Math.abs(this.state.seconds)\n      });\n    }\n  };\n\n  componentWillUnmount = () => {\n    clearInterval(this.timer);\n  };\n\n  handleStart = () => {\n    this.setState({\n      isCounting: true\n    });\n  };\n\n  handlePause = () => {\n    this.setState({\n      isCounting: false\n    });\n  };\n\n  handleReset = () => {\n    this.setState({\n      isCounting: false,\n      goal: undefined,\n      minutes: this.props.minutes,\n      seconds: this.props.seconds\n    });\n  };\n\n  changeMinutes = event => {\n    this.setState({\n      minutes: this.checkValue(event.target.value)\n    });\n    event.preventDefault();\n  };\n\n  changeSeconds = event => {\n    this.setState({\n      seconds: this.checkValue(event.target.value)\n    });\n    event.preventDefault();\n  };\n\n  toggleContinueCounting = () => {\n    this.setState(prevState => ({\n      shouldContinue: !prevState.shouldContinue\n    }));\n  };\n\n  toggleBlink = () => {\n    this.setState(prevState => ({\n      shouldBlink: !prevState.shouldBlink\n    }));\n  };\n\n  checkValue = value => {\n    value = Math.max(value, 0);\n    value = Math.min(value, 59);\n\n    return value;\n  };\n\n  counting = () => {\n    this.setState(prevState => {\n      const diffInSeconds = (prevState.goal.getTime() - Date.now()) / 1000;\n      const minutes = Math.trunc(diffInSeconds / 60);\n      const seconds = Math.trunc(diffInSeconds % 60);\n\n      return {\n        minutes,\n        seconds\n      };\n    });\n  };\n\n  render() {\n    const { shouldBlink, shouldContinue, isCounting, minutes, seconds } = this.state;\n\n    const isExpired = minutes < 0 || seconds < 0;\n    const blinkClass = isCounting && shouldBlink && minutes === 0 && seconds === 0 ? ' blink' : '';\n    const startPauseButtonClass = isCounting ? 'pauseButton' : 'startButton';\n\n    return (\n      <div className={'timer flex flex-col justify-center w-screen h-screen bg-grey-light' + blinkClass}>\n        <div className=\"units flex justify-center\">\n          <Unit\n            value={minutes}\n            handleOnChange={this.changeMinutes}\n            isDisabled={isCounting}\n            title=\"minutes\"\n            isExpired={isExpired}\n          />\n          <Unit\n            value={seconds}\n            handleOnChange={this.changeSeconds}\n            isDisabled={isCounting}\n            title=\"seconds\"\n            isExpired={isExpired}\n          />\n        </div>\n\n        <div className=\"flex justify-center items-center mt-3\">\n          <div\n            onClick={isCounting ? this.handlePause : this.handleStart}\n            className={\n              'w-16 h-16 hover:bg-green-dark text-white rounded-full m-1 cursor-pointer flex justify-center items-center ' +\n              startPauseButtonClass\n            }\n          >\n            {isCounting ? <Icon.Pause color=\"white\" /> : <Icon.Play color=\"white\" />}\n          </div>\n          <div\n            onClick={this.handleReset}\n            className=\"w-10 h-10 bg-red hover:bg-red-dark rounded-full m-1 cursor-pointer flex justify-center items-center\"\n          >\n            <Icon.RefreshCcw color=\"white\" />\n          </div>\n        </div>\n\n        <div className={isCounting ? 'settings settings--inactive' : 'settings'}>\n          <div className=\"flex justify-center mt-3\">\n            <span className=\"border-t border-grey pt-3 uppercase text-xs text-grey-darkest\">when time is expired</span>\n          </div>\n\n          <div className=\"flex justify-center mt-3\">\n            <Option onClick={this.toggleContinueCounting} active={shouldContinue} title=\"continue counting\" />\n            <Option onClick={this.toggleBlink} active={shouldBlink} title=\"blink\" />\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n","// In production, we register a service worker to serve assets from local cache.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\n// cached resources are updated in the background.\n\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\n// This link also includes instructions on opting out of this behavior.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport default function register() {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebookincubator/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Lets check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl);\n      } else {\n        // Is not local host. Just register service worker\n        registerValidSW(swUrl);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the old content will have been purged and\n              // the fresh content will have been added to the cache.\n              // It's the perfect time to display a \"New content is\n              // available; please refresh.\" message in your web app.\n              console.log('New content is available; please refresh.');\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport { Timer } from './Timer';\nimport registerServiceWorker from './registerServiceWorker';\n\nReactDOM.render(<Timer minutes={0} seconds={5} />, document.getElementById('root'));\nregisterServiceWorker();\n "],"sourceRoot":""}